#!/usr/bin/env python3
"""
Ï≤¥ÌóòÎã® Ïö¥ÏòÅ Ìà¥ - Í∞ÑÎã®Ìïú ÏÑúÎ≤Ñ
"""

from flask import Flask, jsonify, request, render_template_string
from flask_cors import CORS
import sqlite3
import json
from datetime import datetime
import os
import threading
import time
import random
import gspread
from google.oauth2.service_account import Credentials
import psycopg
import concurrent.futures

app = Flask(__name__)
CORS(app, origins=[
    "http://localhost:3000",
    "http://localhost:3001",
    "http://localhost:5173", 
    "http://localhost:8080",
    "https://solvers-liard.vercel.app",
    "https://solvers-gcycn6bc1-butfit-hychos-projects.vercel.app",
    "https://solvers-qgkgemd4e-butfit-hychos-projects.vercel.app",
    "https://solvers-dg0kgn9s5-butfit-hychos-projects.vercel.app",
    "https://solvers-5dkv6i975-butfit-hychos-projects.vercel.app",
    "https://butfit-hycho.github.io"
], supports_credentials=True)

# Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Í≤ΩÎ°ú ÏÑ§Ï†ï (Vercel Î∞∞Ìè¨ Í≥†Î†§)
DB_PATH = os.getenv('DATABASE_PATH', '/tmp/experience_team.db' if os.getenv('VERCEL') else 'experience_team.db')

# Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS applicants (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        experience_group TEXT,
        name TEXT NOT NULL,
        phone TEXT NOT NULL,
        instagram_url TEXT NOT NULL,
        address_zipcode TEXT,
        address_main TEXT NOT NULL,
        address_detail TEXT,
        address_full TEXT NOT NULL,
        agrees_privacy BOOLEAN DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # Í∏∞Ï°¥ ÌÖåÏù¥Î∏îÏóê experience_group Ïª¨Îüº Ï∂îÍ∞Ä (Ïù¥ÎØ∏ ÏûàÏúºÎ©¥ Î¨¥Ïãú)
    try:
        cursor.execute('ALTER TABLE applicants ADD COLUMN experience_group TEXT')
        print("‚úÖ experience_group Ïª¨Îüº Ï∂îÍ∞Ä ÏôÑÎ£å")
    except sqlite3.OperationalError as e:
        if "duplicate column name" in str(e).lower():
            print("‚ÑπÔ∏è  experience_group Ïª¨ÎüºÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§")
        else:
            print(f"‚ö†Ô∏è Ïª¨Îüº Ï∂îÍ∞Ä Ï§ë Ïò§Î•ò: {e}")
    
    conn.commit()
    conn.close()
    print("‚úÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")

# HTML ÌÖúÌîåÎ¶ø
HTML_TEMPLATE = '''
<!DOCTYPE html>
<html>
<head>
    <title>BUTFIT Ï≤¥ÌóòÎã® Î™®Ïßë</title>
    <meta charset="utf-8">
    <link rel="preconnect" href="https://cdn.jsdelivr.net">
    <link href="https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.9/dist/web/static/pretendard.min.css" rel="stylesheet">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body { 
            font-family: 'Pretendard', -apple-system, BlinkMacSystemFont, system-ui, sans-serif;
            background: #09080E;
            color: #ffffff;
            min-height: 100vh;
            line-height: 1.6;
        }
        
        .main-container {
            max-width: 480px;
            margin: 0 auto;
            padding: 20px;
            min-height: 100vh;
        }
        
        .header {
            text-align: center;
            margin-bottom: 40px;
            padding: 20px 0;
        }
        
        .logo {
            font-size: 32px;
            font-weight: 800;
            color: #00FF47;
            margin-bottom: 8px;
            letter-spacing: -0.02em;
        }
        
        .subtitle {
            font-size: 16px;
            color: #888;
            font-weight: 400;
        }
        
        .container {
            background: #1A1A25;
            border-radius: 20px;
            padding: 32px 24px;
            margin-bottom: 24px;
            border: 1px solid #2A2A35;
            backdrop-filter: blur(20px);
        }
        
        .section-title {
            font-size: 20px;
            font-weight: 700;
            color: #ffffff;
            margin-bottom: 24px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .form-group {
            margin-bottom: 24px;
        }
        
        .form-label {
            display: block;
            font-size: 14px;
            font-weight: 600;
            color: #ffffff;
            margin-bottom: 8px;
            letter-spacing: -0.01em;
        }
        
        .required {
            color: #00FF47;
            font-weight: 700;
        }
        
        .form-input {
            width: 100%;
            padding: 16px;
            background: #09080E;
            border: 2px solid #2A2A35;
            border-radius: 12px;
            color: #ffffff;
            font-size: 16px;
            font-family: 'Pretendard', sans-serif;
            transition: all 0.2s ease;
        }
        
        .form-input:focus {
            outline: none;
            border-color: #00FF47;
            background: #0D0C12;
            box-shadow: 0 0 0 3px rgba(0, 255, 71, 0.1);
        }
        
        .form-input::placeholder {
            color: #666;
        }
        
        .form-input:read-only {
            background: #151419;
            color: #999;
            cursor: not-allowed;
        }
        
        .address-group {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        
        .address-search {
            display: flex;
            gap: 12px;
        }
        
        .address-search .form-input {
            flex: 1;
        }
        
        .btn-address {
            background: linear-gradient(135deg, #00FF47, #00E53E);
            color: #09080E;
            border: none;
            padding: 16px 20px;
            border-radius: 12px;
            font-weight: 700;
            font-size: 14px;
            cursor: pointer;
            white-space: nowrap;
            transition: all 0.2s ease;
            font-family: 'Pretendard', sans-serif;
        }
        
        .btn-address:hover {
            background: linear-gradient(135deg, #00E53E, #00CC35);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 255, 71, 0.3);
        }
        
        .btn-submit {
            width: 100%;
            background: linear-gradient(135deg, #00FF47, #00E53E);
            color: #09080E;
            border: none;
            padding: 18px;
            border-radius: 16px;
            font-size: 18px;
            font-weight: 800;
            cursor: pointer;
            transition: all 0.2s ease;
            font-family: 'Pretendard', sans-serif;
            letter-spacing: -0.01em;
        }
        
        .btn-submit:hover {
            background: linear-gradient(135deg, #00E53E, #00CC35);
            transform: translateY(-2px);
            box-shadow: 0 8px 24px rgba(0, 255, 71, 0.3);
        }
        
        .btn-submit:disabled {
            background: #2A2A35;
            color: #666;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .checkbox-group {
            display: flex;
            align-items: flex-start;
            gap: 12px;
            margin-bottom: 20px;
            padding: 16px;
            background: #0D0C12;
            border-radius: 12px;
            border: 1px solid #2A2A35;
        }
        
        .checkbox-input {
            width: 20px;
            height: 20px;
            accent-color: #00FF47;
            margin-top: 2px;
        }
        
        .checkbox-label {
            font-size: 14px;
            color: #ffffff;
            line-height: 1.5;
            cursor: pointer;
        }
        
        .help-text {
            font-size: 13px;
            color: #888;
            margin-top: 6px;
            line-height: 1.4;
        }
        
        .privacy-notice {
            font-size: 12px;
            color: #666;
            line-height: 1.4;
            padding: 12px;
            background: #0D0C12;
            border-radius: 8px;
            border-left: 3px solid #00FF47;
            margin-top: 8px;
        }
        
        .success-message {
            background: linear-gradient(135deg, rgba(0, 255, 71, 0.1), rgba(0, 229, 62, 0.05));
            border: 2px solid rgba(0, 255, 71, 0.3);
            border-radius: 20px;
            backdrop-filter: blur(20px);
        }
        
        .form-input.error {
            border-color: #ff4757;
            box-shadow: 0 0 0 3px rgba(255, 71, 87, 0.1);
        }
        
        @media (max-width: 520px) {
            .main-container {
                padding: 16px;
                max-width: 100%;
            }
            
            .container {
                padding: 24px 20px;
            }
            
            .address-search {
                flex-direction: column;
            }
            
            .btn-address {
                padding: 16px;
            }
        }
    </style>
    <script src="https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js"></script>
</head>
<body>
    <div class="main-container">
        <div class="header">
            <div class="logo">BUTFIT</div>
            <div class="subtitle">Ï≤¥ÌóòÎã® Î™®Ïßë</div>
        </div>
        
        <div class="container">
            <h2 class="section-title">üìù Ï≤¥ÌóòÎã® ÏßÄÏõêÏÑú</h2>
            <form id="applicationForm">
                <div class="form-group">
                    <label class="form-label" for="name">Ïù¥Î¶Ñ <span class="required">*</span></label>
                    <input type="text" id="name" class="form-input" placeholder="Ïã§Î™ÖÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî" required>
                </div>

                <div class="form-group">
                    <label class="form-label" for="phone">Ï†ÑÌôîÎ≤àÌò∏ <span class="required">*</span></label>
                    <input type="tel" id="phone" class="form-input" placeholder="010-0000-0000" required>
                    <div class="help-text">Î∞∞ÏÜ° Î∞è Ïó∞ÎùΩÏùÑ ÏúÑÌï¥ Ï†ïÌôïÌïú Î≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî</div>
                </div>

                <div class="form-group">
                    <label class="form-label" for="instagram_url">Ïù∏Ïä§ÌÉÄÍ∑∏Îû® Í≥ÑÏ†ï <span class="required">*</span></label>
                    <input type="url" id="instagram_url" class="form-input" placeholder="https://instagram.com/your_account" required>
                    <div class="help-text">Ïù∏Ïä§ÌÉÄÍ∑∏Îû® ÌîÑÎ°úÌïÑ Ï†ÑÏ≤¥ ÎßÅÌÅ¨Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî</div>
                </div>

                <div class="form-group">
                    <label class="form-label">Î∞∞ÏÜ° Ï£ºÏÜå <span class="required">*</span></label>
                    <div class="address-group">
                        <div class="address-search">
                            <input type="text" id="address_zipcode" class="form-input" placeholder="Ïö∞Ìé∏Î≤àÌò∏" readonly>
                            <button type="button" class="btn-address" id="addressSearchBtn">Ï£ºÏÜå Í≤ÄÏÉâ</button>
                        </div>
                        <input type="text" id="address_main" class="form-input" placeholder="Í∏∞Î≥∏ Ï£ºÏÜå" readonly required>
                        <input type="text" id="address_detail" class="form-input" placeholder="ÏÉÅÏÑ∏ Ï£ºÏÜå (Îèô, Ìò∏Ïàò Îì±)" required>
                    </div>
                    <div class="help-text">üöö Ï†úÌíà Î∞∞ÏÜ°ÏùÑ ÏúÑÌï¥ Ï†ïÌôïÌïú Ï£ºÏÜåÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî</div>
                </div>

                <div class="checkbox-group">
                    <input type="checkbox" id="agrees_privacy" class="checkbox-input" required>
                    <label class="checkbox-label" for="agrees_privacy">Í∞úÏù∏Ï†ïÎ≥¥ ÏàòÏßë Î∞è Ïù¥Ïö©Ïóê ÎèôÏùòÌï©ÎãàÎã§ <span class="required">*</span></label>
                </div>
                <div class="privacy-notice">
                    ÏàòÏßëÌï≠Î™©: Ïù¥Î¶Ñ, Ï†ÑÌôîÎ≤àÌò∏, Ïù∏Ïä§ÌÉÄÍ∑∏Îû® Í≥ÑÏ†ï, Ï£ºÏÜå<br>
                    Ïù¥Ïö©Î™©Ï†Å: Ï≤¥ÌóòÎã® Ïö¥ÏòÅ Î∞è Ï†úÌíà Î∞∞ÏÜ°<br>
                    Î≥¥Ïú†Í∏∞Í∞Ñ: Ï≤¥ÌóòÎã® Ï¢ÖÎ£å ÌõÑ 1Í∞úÏõî
                </div>

                <button type="submit" class="btn-submit">ÏßÄÏõêÌïòÍ∏∞</button>
            </form>
        </div>


    </div>

    <script>
        // Îã§Ïùå/Ïπ¥Ïπ¥Ïò§ Ï£ºÏÜå Í≤ÄÏÉâ API
        function searchAddress() {
            new daum.Postcode({
                oncomplete: function(data) {
                    document.getElementById('address_zipcode').value = data.zonecode;
                    document.getElementById('address_main').value = data.address;
                    document.getElementById('address_detail').focus();
                }
            }).open();
        }

        // ÏõêÎûò Ìèº ÎÇ¥Ïö© Ï†ÄÏû• Î≥ÄÏàò
        let originalFormContent = '';
        
        // DOMÏù¥ ÏôÑÏ†ÑÌûà Î°úÎìúÎêú ÌõÑ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù
        document.addEventListener('DOMContentLoaded', function() {
            // ÏõêÎûò Ìèº ÎÇ¥Ïö© Ï†ÄÏû•
            const formContainer = document.querySelector('.container');
            if (formContainer) {
                originalFormContent = formContainer.innerHTML;
            }
            // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
            setupEventListeners();
        });
        
        // Ìèº Î¶¨ÏÖã Ìï®Ïàò
        function resetForm() {
            const formContainer = document.querySelector('.container');
            
            if (formContainer && originalFormContent) {
                // ÏõêÎûò Ìèº ÎÇ¥Ïö© Î≥µÏõê
                formContainer.innerHTML = originalFormContent;
                formContainer.className = 'container';
                
                // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îã§Ïãú Îì±Î°ù
                setupEventListeners();
            }
            
            window.scrollTo(0, 0);
        }
        
        // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï Ìï®Ïàò
        function setupEventListeners() {
            // Ï†ÑÌôîÎ≤àÌò∏ ÏûêÎèô Ìè¨Îß∑ÌåÖ
            const phoneInput = document.getElementById('phone');
            if (phoneInput) {
                phoneInput.addEventListener('input', function(e) {
                    let value = e.target.value.replace(/[^0-9]/g, '');
                    if (value.length >= 3 && value.length <= 7) {
                        value = value.substring(0, 3) + '-' + value.substring(3);
                    } else if (value.length >= 8) {
                        value = value.substring(0, 3) + '-' + value.substring(3, 7) + '-' + value.substring(7, 11);
                    }
                    e.target.value = value;
                });
            }

            // Ï£ºÏÜå Í≤ÄÏÉâ Î≤ÑÌäº
            const addressSearchBtn = document.getElementById('addressSearchBtn');
            if (addressSearchBtn) {
                addressSearchBtn.addEventListener('click', searchAddress);
            }

            // ÏßÄÏõêÏÑú Ï†úÏ∂ú
            const applicationForm = document.getElementById('applicationForm');
            if (applicationForm) {
                applicationForm.addEventListener('submit', handleFormSubmit);
            }
        }
        
        // Ìèº Ï†úÏ∂ú Ìï∏Îì§Îü¨ Ìï®Ïàò
        async function handleFormSubmit(e) {
            e.preventDefault();
            
            // Ï£ºÏÜå Ï†ÑÏ≤¥ Î¨∏ÏûêÏó¥ ÏÉùÏÑ±
            const zipcode = document.getElementById('address_zipcode').value;
            const main = document.getElementById('address_main').value;
            const detail = document.getElementById('address_detail').value;
            const fullAddress = `(${zipcode}) ${main} ${detail}`.trim();
            
            const data = {
                name: document.getElementById('name').value,
                phone: document.getElementById('phone').value,
                instagram_url: document.getElementById('instagram_url').value,
                address_zipcode: zipcode,
                address_main: main,
                address_detail: detail,
                address_full: fullAddress,
                agrees_privacy: document.getElementById('agrees_privacy').checked
            };
            
            // Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
            if (!data.name || !data.phone || !data.instagram_url || !data.address_main || !data.address_detail) {
                alert('Î™®Îì† ÌïÑÏàò Ìï≠Î™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
                return;
            }
            
            if (!data.agrees_privacy) {
                alert('Í∞úÏù∏Ï†ïÎ≥¥ ÏàòÏßë Î∞è Ïù¥Ïö©Ïóê ÎèôÏùòÌï¥Ï£ºÏÑ∏Ïöî.');
                return;
            }
            
            // Ï†úÏ∂ú Î≤ÑÌäº ÎπÑÌôúÏÑ±Ìôî
            const submitBtn = document.querySelector('.btn-submit');
            const originalText = submitBtn.textContent;
            submitBtn.disabled = true;
            submitBtn.textContent = 'Ï†úÏ∂ú Ï§ë...';
            
            try {
                const response = await fetch('/api/applicants', {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    // Ìèº Ïª®ÌÖåÏù¥ÎÑàÎ•º ÏÑ±Í≥µ Î©îÏãúÏßÄÎ°ú Î≥ÄÍ≤Ω
                    const formContainer = document.querySelector('.container');
                    
                    if (formContainer) {
                        formContainer.innerHTML = `
                            <div style="text-align: center; padding: 40px 20px;">
                                <div style="font-size: 48px; margin-bottom: 16px;">üéâ</div>
                                <h3 style="color: #00FF47; font-size: 24px; margin-bottom: 12px; font-weight: 700;">ÏßÄÏõêÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!</h3>
                                <p style="color: #ccc; font-size: 16px; line-height: 1.5; margin-bottom: 20px;">
                                    Îπ†Î•∏ ÏãúÏùº ÎÇ¥Ïóê Ïó∞ÎùΩÎìúÎ¶¨Í≤†ÏäµÎãàÎã§.<br>
                                    Ï≤¥ÌóòÎã® ÏÑ†Î∞ú Í≤∞Í≥ºÎäî Í∞úÎ≥Ñ Ïó∞ÎùΩÎìúÎ¶¥ ÏòàÏ†ïÏûÖÎãàÎã§.
                                </p>
                                <button id="resetFormBtn" style="
                                    background: linear-gradient(135deg, #00FF47, #00E53E);
                                    color: #09080E;
                                    border: none;
                                    padding: 12px 24px;
                                    border-radius: 12px;
                                    font-weight: 700;
                                    font-size: 14px;
                                    cursor: pointer;
                                    font-family: 'Pretendard', sans-serif;
                                    transition: all 0.2s ease;
                                " onmouseover="this.style.background='linear-gradient(135deg, #00E53E, #00CC35)'; this.style.transform='translateY(-1px)'" onmouseout="this.style.background='linear-gradient(135deg, #00FF47, #00E53E)'; this.style.transform='translateY(0)'">
                                    Îã§Ïãú ÏßÄÏõêÌïòÍ∏∞
                                </button>
                            </div>
                        `;
                        formContainer.className = 'container success-message';
                        
                        // Îã§Ïãú ÏßÄÏõêÌïòÍ∏∞ Î≤ÑÌäºÏóê Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
                        const resetBtn = document.getElementById('resetFormBtn');
                        if (resetBtn) {
                            resetBtn.addEventListener('click', resetForm);
                        }
                    }
                    // ÌéòÏù¥ÏßÄ ÏµúÏÉÅÎã®ÏúºÎ°ú Ïä§ÌÅ¨Î°§
                    window.scrollTo(0, 0);
                } else {
                    alert('Ïò§Î•ò: ' + (result.error || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'));
                    // Î≤ÑÌäº Î≥µÏõê
                    submitBtn.disabled = false;
                    submitBtn.textContent = originalText;
                }
            } catch (error) {
                alert('ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò: ' + error.message);
                // Î≤ÑÌäº Î≥µÏõê
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            }
        }
    </script>
</body>
</html>
'''

# Ïù∏Ïä§ÌÉÄÍ∑∏Îû® ÏÇ¨Ïö©ÏûêÎ™Ö Ï∂îÏ∂ú Ìï®Ïàò
def extract_instagram_username(instagram_url):
    """Ïù∏Ïä§ÌÉÄÍ∑∏Îû® URLÏóêÏÑú ÏÇ¨Ïö©ÏûêÎ™Ö Ï∂îÏ∂ú"""
    import re
    
    # Îã§ÏñëÌïú Ïù∏Ïä§ÌÉÄÍ∑∏Îû® URL Ìå®ÌÑ¥ Ï≤òÎ¶¨
    patterns = [
        r'instagram\.com/([^/?]+)',  # Í∏∞Î≥∏ Ìå®ÌÑ¥
        r'instagram\.com/([^/]+)/profilecard',  # profilecard Ìå®ÌÑ¥
        r'instagram\.com/p/([^/?]+)',  # Í≤åÏãúÎ¨º Ìå®ÌÑ¥
        r'instagram\.com/reel/([^/?]+)',  # Î¶¥Ïä§ Ìå®ÌÑ¥
    ]
    
    for pattern in patterns:
        match = re.search(pattern, instagram_url)
        if match:
            username = match.group(1)
            # profilecardÎÇò Í∏∞ÌÉÄ Í≤ΩÎ°úÍ∞Ä ÏïÑÎãå Ïã§Ï†ú ÏÇ¨Ïö©ÏûêÎ™ÖÎßå Î∞òÌôò
            if username not in ['p', 'reel', 'stories', 'tv']:
                return username
    
    return 'unknown_user'

# Ïã§Ï†ú Ïù∏Ïä§ÌÉÄÍ∑∏Îû® Ïä§ÌÅ¨ÎûòÌïë Ìï®Ïàò
def scrape_instagram_profile(username):
    """Ïã§Ï†ú Ïù∏Ïä§ÌÉÄÍ∑∏Îû® ÌîÑÎ°úÌïÑ Ïä§ÌÅ¨ÎûòÌïë"""
    try:
        from selenium import webdriver
        from selenium.webdriver.common.by import By
        from selenium.webdriver.chrome.options import Options
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        from webdriver_manager.chrome import ChromeDriverManager
        
        print(f"ü§ñ Ïä§ÌÅ¨ÎûòÌïë ÏãúÏûë: @{username}")
        
        # Chrome ÏòµÏÖò ÏÑ§Ï†ï
        chrome_options = Options()
        chrome_options.add_argument('--headless')  # Î∞±Í∑∏ÎùºÏö¥Îìú Ïã§Ìñâ
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--window-size=1920,1080')
        chrome_options.add_argument('--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
        
        # ChromeDriver Ï¥àÍ∏∞Ìôî
        driver = webdriver.Chrome(options=chrome_options)
        
        try:
            # Instagram ÌîÑÎ°úÌïÑ ÌéòÏù¥ÏßÄ Ï†ëÍ∑º
            profile_url = f"https://www.instagram.com/{username}/"
            driver.get(profile_url)
            
            # ÌéòÏù¥ÏßÄ Î°úÎî© ÎåÄÍ∏∞
            time.sleep(random.uniform(2, 4))
            
            # ÌÜµÍ≥Ñ Ï†ïÎ≥¥ Ï∂îÏ∂ú ÏãúÎèÑ
            followers_count = 0
            following_count = 0
            posts_count = 0
            is_private = False
            
            try:
                # ÏÉàÎ°úÏö¥ Instagram Î†àÏù¥ÏïÑÏõÉ ÏÑ†ÌÉùÏûêÎì§
                stats_selectors = [
                    'a[href*="/followers/"] span[title]',  # ÌåîÎ°úÏõå (title ÏÜçÏÑ±)
                    'a[href*="/followers/"] span',         # ÌåîÎ°úÏõå (ÌÖçÏä§Ìä∏)
                    'main section ul li:nth-child(2) span[title]',  # ÎåÄÏ≤¥ ÏÑ†ÌÉùÏûê
                    'main section ul li:nth-child(2) button span[title]',
                ]
                
                # Í≤åÏãúÎ¨º Ïàò ÏÑ†ÌÉùÏûê (2025ÎÖÑ Instagram Î†àÏù¥ÏïÑÏõÉ ÎåÄÏùë)
                posts_selectors = [
                    # ÏµúÏã† Instagram Î†àÏù¥ÏïÑÏõÉ ÏÑ†ÌÉùÏûêÎì§
                    'main section div div span[title]',  # Ï†úÎ™© ÏÜçÏÑ±Ïù¥ ÏûàÎäî span
                    'main section div span',             # Î©îÏù∏ ÏÑπÏÖòÏùò Ï≤´ Î≤àÏß∏ ÌÜµÍ≥Ñ
                    'article section div span',          # ÏïÑÌã∞ÌÅ¥ ÎÇ¥ ÌÜµÍ≥Ñ
                    'div[data-testid*="user"] ~ div span', # ÏÇ¨Ïö©Ïûê ÏïÑÎ∞îÌÉÄ ÏòÜ Ï†ïÎ≥¥
                    'header section ul li span',         # Ìó§Îçî ÌÜµÍ≥Ñ Î¶¨Ïä§Ìä∏
                    'main header section ul li span',    # Î©îÏù∏ Ìó§Îçî ÌÜµÍ≥Ñ
                    # Î∞±ÏóÖ ÏÑ†ÌÉùÏûêÎì§
                    'main section ul li:first-child span',
                    'article header section ul li:first-child span',
                    'div[data-testid="user-avatar"] ~ div span'
                ]
                
                # ÌåîÎ°úÏõå Ïàò Ï∂îÏ∂ú
                for selector in stats_selectors:
                    try:
                        elements = driver.find_elements(By.CSS_SELECTOR, selector)
                        for element in elements:
                            text = element.get_attribute('title') or element.text
                            if text and (',' in text or text.isdigit()):
                                followers_count = int(text.replace(',', '').replace('ÌåîÎ°úÏõå', '').strip())
                                print(f"üìä ÌåîÎ°úÏõå Ïàò Î∞úÍ≤¨: {followers_count:,}")
                                break
                        if followers_count > 0:
                            break
                    except:
                        continue
                
                # Í≤åÏãúÎ¨º Ïàò Ï∂îÏ∂ú (Í∞úÏÑ†Îêú Î°úÏßÅ)
                print("üîç Í≤åÏãúÎ¨º Ïàò ÌÉêÏßÄ ÏãúÏûë...")
                
                # Î™®Îì† span ÏöîÏÜåÎ•º Í≤ÄÏÇ¨Ìï¥ÏÑú Ïà´ÏûêÎßå ÏûàÎäî Í≤É Ï∞æÍ∏∞
                try:
                    all_spans = driver.find_elements(By.CSS_SELECTOR, 'main span, article span, header span')
                    print(f"üìã Ï†ÑÏ≤¥ span ÏöîÏÜå {len(all_spans)}Í∞ú Í≤ÄÏÇ¨ Ï§ë...")
                    
                    for span in all_spans:
                        try:
                            text = span.text.strip()
                            title = span.get_attribute('title')
                            
                            # ÌÖçÏä§Ìä∏ÎÇò titleÏóêÏÑú Ïà´Ïûê Í≤ÄÏÇ¨
                            for check_text in [text, title]:
                                if check_text:
                                    # ÏâºÌëú Ï†úÍ±∞ ÌõÑ Ïà´ÏûêÏù∏ÏßÄ ÌôïÏù∏
                                    clean_text = check_text.replace(',', '').strip()
                                    if clean_text.isdigit():
                                        number = int(clean_text)
                                        # Í≤åÏãúÎ¨º ÏàòÎ°ú Î≥¥Ïù¥Îäî Î≤îÏúÑ (0~10000)
                                        if 0 <= number <= 10000:
                                            # ÌåîÎ°úÏõå ÏàòÏôÄ Îã§Î•∏ Ïà´ÏûêÏù∏ÏßÄ ÌôïÏù∏
                                            if number != followers_count:
                                                posts_count = number
                                                print(f"üì∏ Í≤åÏãúÎ¨º Ïàò ÌõÑÎ≥¥ Î∞úÍ≤¨: {posts_count:,} (ÏõêÎ≥∏: '{check_text}')")
                                                break
                        except:
                            continue
                        
                        if posts_count > 0:
                            break
                            
                except Exception as e:
                    print(f"‚ö†Ô∏è Ï†ÑÏ≤¥ span Í≤ÄÏÇ¨ Ïã§Ìå®: {e}")
                
                # Í∏∞Ï°¥ ÏÑ†ÌÉùÏûêÎ°úÎèÑ ÏãúÎèÑ
                if posts_count == 0:
                    print("üîÑ Í∏∞Ï°¥ ÏÑ†ÌÉùÏûêÎ°ú Ïû¨ÏãúÎèÑ...")
                    for selector in posts_selectors:
                        try:
                            elements = driver.find_elements(By.CSS_SELECTOR, selector)
                            for element in elements:
                                text = element.text.strip()
                                title = element.get_attribute('title')
                                
                                for check_text in [text, title]:
                                    if check_text and check_text.replace(',', '').isdigit():
                                        number = int(check_text.replace(',', ''))
                                        if 0 <= number <= 10000 and number != followers_count:
                                            posts_count = number
                                            print(f"üì∏ Í≤åÏãúÎ¨º Ïàò Î∞úÍ≤¨ (ÏÑ†ÌÉùÏûê {selector}): {posts_count:,}")
                                            break
                                
                                if posts_count > 0:
                                    break
                            if posts_count > 0:
                                break
                        except Exception as e:
                            print(f"‚ö†Ô∏è ÏÑ†ÌÉùÏûê {selector} Ïã§Ìå®: {e}")
                            continue
                
                # ÎπÑÍ≥µÍ∞ú Í≥ÑÏ†ï ÌôïÏù∏
                try:
                    private_indicators = [
                        'span:contains("ÎπÑÍ≥µÍ∞ú Í≥ÑÏ†ï")',
                        'span:contains("This Account is Private")',
                        'div[data-testid="user-avatar"] ~ div:contains("ÎπÑÍ≥µÍ∞ú")'
                    ]
                    
                    for indicator in private_indicators:
                        elements = driver.find_elements(By.XPATH, f"//*[contains(text(), 'ÎπÑÍ≥µÍ∞ú')]")
                        if elements:
                            is_private = True
                            print("üîí ÎπÑÍ≥µÍ∞ú Í≥ÑÏ†ï ÌôïÏù∏Îê®")
                            break
                except:
                    pass
                
                return {
                    'followers_count': followers_count,
                    'following_count': following_count,  # TODO: ÌïÑÏöîÏãú Ï∂îÍ∞Ä
                    'posts_count': posts_count,
                    'is_private': is_private,
                    'scraping_success': True,
                    'scraping_error': None
                }
                
            except Exception as e:
                print(f"üìä Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú Ïã§Ìå®: {e}")
                return {
                    'followers_count': 0,
                    'following_count': 0,
                    'posts_count': 0,
                    'is_private': False,
                    'scraping_success': False,
                    'scraping_error': str(e)
                }
                
        finally:
            driver.quit()
            
    except Exception as e:
        print(f"‚ùå Ïä§ÌÅ¨ÎûòÌïë Ï¥àÍ∏∞Ìôî Ïã§Ìå®: {e}")
        return {
            'followers_count': 0,
            'following_count': 0,
            'posts_count': 0,
            'is_private': False,
            'scraping_success': False,
            'scraping_error': f"Ï¥àÍ∏∞Ìôî Ïã§Ìå®: {str(e)}"
        }

# Ïù∏Ïä§ÌÉÄÍ∑∏Îû® Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ìï®Ïàò (Ïä§ÌÅ¨ÎûòÌïë Î≤ÑÏ†Ñ)
def collect_instagram_data(instagram_url, applicant_id):
    """Ïù∏Ïä§ÌÉÄÍ∑∏Îû® Îç∞Ïù¥ÌÑ∞ ÏàòÏßë (Ïã§Ï†ú Ïä§ÌÅ¨ÎûòÌïë)"""
    try:
        print(f"üîç Ïù∏Ïä§ÌÉÄÍ∑∏Îû® Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏãúÏûë: {instagram_url}")
        
        # URLÏóêÏÑú Ïã§Ï†ú ÏÇ¨Ïö©ÏûêÎ™Ö Ï∂îÏ∂ú
        username = extract_instagram_username(instagram_url)
        print(f"üìù Ï∂îÏ∂úÎêú ÏÇ¨Ïö©ÏûêÎ™Ö: {username}")
        
        # Ïã§Ï†ú Ïä§ÌÅ¨ÎûòÌïë Ïã§Ìñâ
        scraped_data = scrape_instagram_profile(username)
        
        # Ïä§ÌÅ¨ÎûòÌïë ÏÑ±Í≥µ Ïó¨Î∂ÄÏóê Îî∞Îùº Îç∞Ïù¥ÌÑ∞ Íµ¨ÏÑ±
        if scraped_data['scraping_success']:
            instagram_data = {
                'followers_count': scraped_data['followers_count'],
                'media_count': scraped_data['posts_count'],  # posts_countÎ•º media_countÎ°ú Îß§Ìïë
                'username': username,
                'account_type': 'private' if scraped_data['is_private'] else 'public'
            }
            print(f"‚úÖ Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏÑ±Í≥µ: ÌåîÎ°úÏõå {instagram_data['followers_count']:,}, Í≤åÏãúÎ¨º {instagram_data['media_count']:,}")
        else:
            # Ïä§ÌÅ¨ÎûòÌïë Ïã§Ìå®Ïãú ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ + Ïò§Î•ò Ï†ïÎ≥¥
            instagram_data = {
                'followers_count': 0,
                'media_count': 0,
                'username': username,
                'account_type': 'unknown'
            }
            print(f"‚ö†Ô∏è Ïä§ÌÅ¨ÎûòÌïë Ïã§Ìå®, Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©: {scraped_data['scraping_error']}")
        
        # ÎîúÎ†àÏù¥ Ï∂îÍ∞Ä (Instagram Ï∞®Îã® Î∞©ÏßÄ)
        time.sleep(random.uniform(1, 3))
        
        # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # Ïù∏Ïä§ÌÉÄÍ∑∏Îû® Ï†ïÎ≥¥ ÌÖåÏù¥Î∏î ÏÉùÏÑ± (ÏóÜÏúºÎ©¥)
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS instagram_data (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            applicant_id INTEGER,
            instagram_url TEXT,
            followers_count INTEGER,
            media_count INTEGER,
            username TEXT,
            account_type TEXT,
            collected_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (applicant_id) REFERENCES applicants (id)
        )
        ''')
        
        # Ïù∏Ïä§ÌÉÄÍ∑∏Îû® Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
        cursor.execute('''
            INSERT INTO instagram_data 
            (applicant_id, instagram_url, followers_count, media_count, username, account_type)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (
            applicant_id,
            instagram_url,
            instagram_data['followers_count'],
            instagram_data['media_count'],
            instagram_data['username'],
            instagram_data['account_type']
        ))
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ Ïù∏Ïä§ÌÉÄÍ∑∏Îû® Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏôÑÎ£å: {instagram_data}")
        
    except Exception as e:
        print(f"‚ùå Ïù∏Ïä§ÌÉÄÍ∑∏Îû® Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ïã§Ìå®: {e}")

# PostgreSQL Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÏÑ§Ï†ï
POSTGRES_CONFIG = {
    'host': 'butfitseoul-replica.cjilul7too7t.ap-northeast-2.rds.amazonaws.com',
    'port': 5432,
    'dbname': 'master_20221217',
    'user': 'hycho',
    'password': 'gaW4Charohchee5shigh0aemeeThohyu'
}

def get_postgres_connection():
    """PostgreSQL Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞"""
    try:
        conn = psycopg.connect(
            host=POSTGRES_CONFIG['host'],
            port=POSTGRES_CONFIG['port'],
            dbname=POSTGRES_CONFIG['dbname'],
            user=POSTGRES_CONFIG['user'],
            password=POSTGRES_CONFIG['password']
        )
        print("‚úÖ PostgreSQL Ïó∞Í≤∞ ÏÑ±Í≥µ")
        return conn
    except Exception as e:
        print(f"‚ùå PostgreSQL Ïó∞Í≤∞ Ïã§Ìå®: {e}")
        return None

def test_postgres_connection():
    """PostgreSQL Ïó∞Í≤∞ ÌÖåÏä§Ìä∏"""
    try:
        conn = get_postgres_connection()
        if conn:
            with conn.cursor() as cursor:
                cursor.execute("SELECT version();")
                version = cursor.fetchone()
                print(f"‚úÖ PostgreSQL Î≤ÑÏ†Ñ: {version[0]}")
                
                # ÌÖåÏù¥Î∏î Î™©Î°ù ÌôïÏù∏
                cursor.execute("""
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    ORDER BY table_name;
                """)
                tables = cursor.fetchall()
                print(f"üìã ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÌÖåÏù¥Î∏î: {[table[0] for table in tables[:10]]}")  # Ï≤´ 10Í∞úÎßå ÌëúÏãú
                
            conn.close()
            return True
    except Exception as e:
        print(f"‚ùå PostgreSQL ÌÖåÏä§Ìä∏ Ïã§Ìå®: {e}")
        return False

# Î©§Î≤ÑÏã≠ Ï°∞Ìöå Ìï®Ïàò (Ïã§Ï†ú DB Ïó∞Í≤∞)
def check_membership_status_real(phone, applicant_id):
    """Ïã§Ï†ú PostgreSQL DBÏóêÏÑú Î©§Î≤ÑÏã≠ ÏÉÅÌÉú Ï°∞Ìöå"""
    try:
        print(f"üîç Ïã§Ï†ú DBÏóêÏÑú Î©§Î≤ÑÏã≠ Ï°∞Ìöå ÏãúÏûë: {phone}")
        
        conn = get_postgres_connection()
        if not conn:
            print("‚ùå DB Ïó∞Í≤∞ Ïã§Ìå® - ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©")
            return check_membership_status_dummy(phone, applicant_id)
        
        with conn.cursor() as cursor:
            # Ïã§Ï†ú Î©§Î≤ÑÏã≠ Ï°∞Ìöå ÏøºÎ¶¨ (Ïã†ÎèÑÎ¶º Ï°∞Í±¥ Ï†úÍ±∞, ÏßÄÏ†êÎ™Ö Ï∂îÍ∞Ä)
            membership_query = """
            WITH membership_data AS (
                SELECT
                    a.id AS mbs1_id,
                    TO_CHAR(f.pay_date, 'YYYY-MM-DD') AS mbs1_Í≤∞Ï†úÏùº,
                    TO_CHAR(f.pay_date, 'YYYY-MM') AS mbs1_Í≤∞Ï†úÏõî,
                    a.begin_date AS mbs1_ÏãúÏûëÏùº,
                    a.end_date AS mbs1_Ï¢ÖÎ£åÏùº,
                    TO_CHAR(a.end_date, 'YYYY-MM') AS mbs1_Ï¢ÖÎ£åÏõî,
                    a.title AS mbs1_ÏÉÅÌíàÎ™Ö,
                    b.item_price AS mbs1_Í∞ÄÍ≤©,
                    d.name AS mbs1_ÏßÄÏ†ê,
                    e.id AS mbs1_user_id,
                    e.name AS mbs1_user_name,
                    REGEXP_REPLACE (e.phone_number, '(02|.{3})(.+)(.{4})', '\\1-\\2-\\3')  AS mbs1_user_phone,
                    ROW_NUMBER() OVER (PARTITION BY e.id ORDER BY a.end_date DESC) AS rn,
                    e.birth_date as mbs1_user_birth
                FROM
                    b_payment_btransactionlog b
                    LEFT JOIN b_class_bmembership a ON a.transaction_log_id = b.id
                    LEFT JOIN b_class_bpass c ON c.id = a.b_pass_id
                    LEFT JOIN b_class_bplace d ON d.id = b.b_place_id
                    LEFT JOIN user_user e ON e.id = c.user_id
                    LEFT JOIN b_payment_btransaction f ON f.id = b.transaction_id
                WHERE
                    a.refund_transaction_id IS NULL
                    AND a.id IS NOT NULL
            ),
            -- ÌòÑÏû¨ Ïú†Ìö®Ìïú Î©§Î≤ÑÏã≠Ïù¥ ÏûàÎäî ÌöåÏõê (ÌòÑÏû¨ ÎÇ†Ïßú Ïù¥ÌõÑÍπåÏßÄ Î©§Î≤ÑÏã≠Ïù¥ Ï°¥Ïû¨ÌïòÎäî ÌöåÏõê)
            active_membership AS (
                SELECT *
                FROM membership_data
                WHERE mbs1_Ï¢ÖÎ£åÏùº >= CURRENT_DATE  -- ÌòÑÏû¨ Ïú†Ìö®Ìïú Î©§Î≤ÑÏã≠Îßå ÏÑ†ÌÉù
                  AND rn = 1 -- Í∞ÄÏû• ÏµúÍ∑º Î©§Î≤ÑÏã≠Îßå ÏÑ†ÌÉù
                  AND mbs1_ÏÉÅÌíàÎ™Ö NOT LIKE '%%Î≤ÑÌïèÎ†àÏù¥Ïä§%%' -- Ï†úÏô∏Ìï† Î©§Î≤ÑÏã≠ 1
                  AND mbs1_ÏÉÅÌíàÎ™Ö NOT LIKE '%%Í±¥Í∞ï ÏÑ†Î¨º%%' -- Ï†úÏô∏Ìï† Î©§Î≤ÑÏã≠ 2
                  AND mbs1_ÏÉÅÌíàÎ™Ö NOT LIKE '%%Î¶¨Îâ¥Ïñº%%' -- Ï†úÏô∏Ìï† Î©§Î≤ÑÏã≠ 3
                  AND mbs1_ÏÉÅÌíàÎ™Ö NOT LIKE '%%Î≤†ÎÑ§Ìïè%%' -- Ï†úÏô∏Ìï† Î©§Î≤ÑÏã≠ 4
            )
            -- ÏµúÏ¢Ö Í≤∞Í≥º Ï∂úÎ†• (ÌäπÏ†ï Ï†ÑÌôîÎ≤àÌò∏Î°ú Í≤ÄÏÉâ, ÏßÄÏ†êÎ™Ö Ìè¨Ìï®)
            SELECT 
                am.mbs1_user_name AS "ÌöåÏõêÏù¥Î¶Ñ",
                am.mbs1_user_phone AS "Ï†ÑÌôîÎ≤àÌò∏",
                am.mbs1_user_birth as "ÏÉùÎÖÑÏõî",
                am.mbs1_ÏÉÅÌíàÎ™Ö AS "ÌòÑÏû¨Î©§Î≤ÑÏã≠ÏÉÅÌíàÎ™Ö",
                am.mbs1_ÏãúÏûëÏùº AS "Ïù¥Ïö©ÏãúÏûëÏùº",
                am.mbs1_Ï¢ÖÎ£åÏùº AS "Ïù¥Ïö©Ï¢ÖÎ£åÏùº",
                am.mbs1_user_id AS "ÌöåÏõêID",
                am.mbs1_ÏßÄÏ†ê AS "ÏßÄÏ†êÎ™Ö"
            FROM 
                active_membership am
            WHERE
                am.mbs1_user_name NOT LIKE '%%ÌÉàÌá¥%%'
                AND am.mbs1_user_phone = %s
            ORDER BY 
                am.mbs1_user_name ASC, am.mbs1_Ï¢ÖÎ£åÏùº DESC
            LIMIT 1;
            """
            
            cursor.execute(membership_query, (phone,))
            result = cursor.fetchone()
            
            if result:
                membership_data = {
                    'is_member': True,
                    'member_name': result[0],
                    'member_phone': result[1], 
                    'member_birth': result[2],
                    'membership_type': result[3],
                    'start_date': result[4].strftime('%Y-%m-%d') if result[4] else None,
                    'end_date': result[5].strftime('%Y-%m-%d') if result[5] else None,
                    'member_id': str(result[6]),
                    'branch_name': result[7]  # ÏßÄÏ†êÎ™Ö Ï∂îÍ∞Ä
                }
                print(f"‚úÖ Ïã§Ï†ú DBÏóêÏÑú ÌöåÏõê Ï†ïÎ≥¥ Î∞úÍ≤¨: {membership_data['member_name']} ({membership_data['membership_type']}) - {membership_data['branch_name']}")
            else:
                membership_data = {
                    'is_member': False,
                    'member_name': None,
                    'member_phone': None,
                    'member_birth': None,
                    'membership_type': None,
                    'start_date': None,
                    'end_date': None,
                    'member_id': None,
                    'branch_name': None
                }
                print(f"‚ÑπÔ∏è Ïã§Ï†ú DBÏóêÏÑú Ïú†Ìö®Ìïú ÌöåÏõê Ï†ïÎ≥¥ ÏóÜÏùå")
        
        conn.close()
        
        # SQLiteÏóê Í≤∞Í≥º Ï†ÄÏû• (Ï†ÑÏ≤¥ Ï†ïÎ≥¥ Ìè¨Ìï®)
        save_membership_to_sqlite(applicant_id, phone, {
            'is_member': membership_data['is_member'],
            'membership_type': membership_data['membership_type'],
            'member_id': membership_data['member_id'],
            'expiry_date': membership_data['end_date'],
            'start_date': membership_data['start_date'],
            'branch_name': membership_data['branch_name']
        })
        
        return membership_data
        
    except Exception as e:
        print(f"‚ùå Ïã§Ï†ú DB Î©§Î≤ÑÏã≠ Ï°∞Ìöå Ïã§Ìå®: {e}")
        # Ïò§Î•ò Ïãú ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Î°ú Ìè¥Î∞±
        return check_membership_status_dummy(phone, applicant_id)

def get_membership_history_real(phone):
    """Ïã§Ï†ú PostgreSQL DBÏóêÏÑú Î©§Î≤ÑÏã≠ ÌûàÏä§ÌÜ†Î¶¨ Ï†ÑÏ≤¥ Ï°∞Ìöå (Ïû¨Îì±Î°ù Ïó¨Î∂Ä ÌôïÏù∏Ïö©)"""
    try:
        print(f"üìú Ïã§Ï†ú DBÏóêÏÑú Î©§Î≤ÑÏã≠ ÌûàÏä§ÌÜ†Î¶¨ Ï°∞Ìöå ÏãúÏûë: {phone}")
        
        conn = get_postgres_connection()
        if not conn:
            print("‚ùå DB Ïó∞Í≤∞ Ïã§Ìå® - Îπà ÌûàÏä§ÌÜ†Î¶¨ Î∞òÌôò")
            return []
        
        with conn.cursor() as cursor:
            # Ï†úÍ≥µÎ∞õÏùÄ ÏøºÎ¶¨Î•º Í∏∞Î∞òÏúºÎ°ú Ìïú Í∞úÏÑ†Îêú Î©§Î≤ÑÏã≠ ÌûàÏä§ÌÜ†Î¶¨ Ï°∞Ìöå
            history_query = """
            WITH RECURSIVE category AS (
                SELECT a.id AS id, a.name AS name 
                FROM b_payment_bmaincategory a 
                WHERE a.depth = 1
                UNION ALL
                SELECT a.id AS id, c.name 
                FROM b_payment_bmaincategory a 
                JOIN category c ON a.parent_id = c.id 
                WHERE a.depth IN (2, 3)
            ),
            
            mbs_data1 AS (
                SELECT 
                    f.name AS ÏßÄÏ†êÎ™Ö,
                    CASE WHEN m.id IS NOT NULL THEN m.id ELSE k.id END AS user_id,
                    CASE WHEN m.id IS NOT NULL THEN m.name ELSE k.name END AS ÌöåÏõêÎ™Ö,
                    CASE WHEN m.id IS NOT NULL THEN regexp_replace(m.phone_number, '(02|.{3})(.+)(.{4})', '\\1-\\2-\\3') 
                         ELSE regexp_replace(k.phone_number, '(02|.{3})(.+)(.{4})', '\\1-\\2-\\3') END AS Ïó∞ÎùΩÏ≤ò,
                    a.id AS mbs1_id,
                    c.pay_date AS mbs1_Í≤∞Ï†úÏùº,
                    a.begin_date AS mbs1_ÏãúÏûëÏùº,
                    a.end_date AS mbs1_Ï¢ÖÎ£åÏùº,
                    CASE 
                        WHEN b.is_transfer IS TRUE AND tf.id IS NULL THEN 'ÏñëÎèÑ ÏàòÏàòÎ£å'
                        WHEN b.is_transfer IS FALSE AND tf.id IS NOT NULL THEN CONCAT(tf.title, '(ÏñëÏàò)')
                        WHEN b.is_refund IS TRUE AND rf.id IS NULL THEN CONCAT('(ÌôòÎ∂à)', b.item_info ->> 'description')
                        WHEN b.is_refund IS FALSE AND rf.id IS NOT NULL THEN CONCAT('(ÌôòÎ∂à)', rf.title)
                        WHEN a.id IS NULL AND b.id IS NULL THEN c.pg_log ->> 'name'
                        WHEN a.id IS NULL THEN COALESCE(b.item_info ->> 'description', b.item_info ->> 'name')
                        ELSE a.title 
                    END AS mbs1_ÏÉÅÌíàÎ™Ö,
                    ROUND(
                        CASE 
                            WHEN c.is_transfer IS TRUE THEN c.final_price / 1.1
                            WHEN b.is_refund IS TRUE THEN -b.item_price / 1.1
                            ELSE b.item_price / 1.1
                        END
                    ) AS mbs1_Í∞ÄÍ≤©,
                    e.name AS mbs1_Ïπ¥ÌÖåÍ≥†Î¶¨,
                    -- ÌòÑÏû¨ ÏÉÅÌÉú ÌåêÎã®
                    CASE 
                        WHEN a.end_date >= CURRENT_DATE THEN 'active'
                        WHEN a.end_date < CURRENT_DATE THEN 'expired'
                        ELSE 'unknown'
                    END AS status
                FROM b_payment_btransaction c 
                    LEFT JOIN b_payment_btransactionlog b ON b.transaction_id = c.id
                    LEFT JOIN b_payment_bproductitem bi ON bi.id = b.item_id
                    LEFT JOIN b_payment_badditionalproductitem bai ON bai.id = b.item_id
                    LEFT JOIN b_payment_blocalitem bli ON bli.id = b.item_id
                    LEFT JOIN b_class_bmembership a ON b.id = a.transaction_log_id
                    LEFT JOIN category e ON e.id = (
                        CASE 
                            WHEN b.item_type = 'item' THEN bi.category_id
                            WHEN b.item_type = 'add_item' THEN bai.category_id
                            WHEN b.item_type = 'local_item' THEN bli.category_id
                        END
                    )
                    LEFT JOIN b_class_bplace f ON f.id = b.b_place_id
                    LEFT JOIN user_user k ON k.id = c.user_id
                    LEFT JOIN b_class_bpass l ON l.id = a.b_pass_id
                    LEFT JOIN user_user m ON m.id = l.user_id
                    LEFT JOIN (
                        SELECT id, original_log_id, item_info ->> 'description' AS title
                        FROM b_payment_btransactionlog
                        WHERE is_refund = TRUE
                    ) rf ON rf.original_log_id = b.id
                    LEFT JOIN (
                        SELECT a.id, a.original_log_id, item_info ->> 'description' AS title
                        FROM b_payment_btransactionlog a
                        LEFT JOIN b_class_bmembership b ON b.transaction_log_id = a.id
                        WHERE is_transfer = TRUE
                    ) tf ON tf.original_log_id = b.id
                WHERE 
                    (b.item_price != 0 OR b.is_transfer = TRUE)
                    AND (a.id IS NULL OR a.title NOT LIKE '%%ÏïàÏã¨Í≤∞Ï†ú%%')
                    AND a.title NOT LIKE '%%ÏûÑÏßÅÏõê%%'
                    AND a.refund_transaction_id IS NULL
                    AND a.id IS NOT NULL
                    AND (CASE WHEN m.id IS NOT NULL THEN regexp_replace(m.phone_number, '(02|.{3})(.+)(.{4})', '\\1-\\2-\\3') 
                         ELSE regexp_replace(k.phone_number, '(02|.{3})(.+)(.{4})', '\\1-\\2-\\3') END) = %s
                    AND a.title NOT LIKE '%%Î≤ÑÌïèÎ†àÏù¥Ïä§%%'
                    AND a.title NOT LIKE '%%Í±¥Í∞ï ÏÑ†Î¨º%%'
                    AND a.title NOT LIKE '%%Î¶¨Îâ¥Ïñº%%'
                    AND a.title NOT LIKE '%%Î≤†ÎÑ§Ìïè%%'
                    AND (CASE WHEN m.id IS NOT NULL THEN m.name ELSE k.name END) NOT LIKE '%%ÌÉàÌá¥%%'
            ),
            
            mbs_data2 AS (
                SELECT mbs1.*,
                    ROW_NUMBER() OVER (
                        PARTITION BY mbs1.ÏßÄÏ†êÎ™Ö, mbs1.user_id
                        ORDER BY 
                            CASE 
                                WHEN mbs1.mbs1_Ï¢ÖÎ£åÏùº IS NOT NULL THEN 0 
                                ELSE 1 
                            END ASC,
                            mbs1.mbs1_Ï¢ÖÎ£åÏùº ASC,
                            mbs1.mbs1_id ASC
                    ) AS mbs1_ÌöåÏ∞®
                FROM mbs_data1 mbs1 
            ),
            
            mbs_data3 AS (
                SELECT mbs22.*,
                       mbs2.mbs1_id AS mbs2_id,
                       mbs2.mbs1_Í≤∞Ï†úÏùº AS mbs2_Í≤∞Ï†úÏùº,
                       mbs2.mbs1_ÏãúÏûëÏùº AS mbs2_ÏãúÏûëÏùº,
                       mbs2.mbs1_Ï¢ÖÎ£åÏùº AS mbs2_Ï¢ÖÎ£åÏùº,
                       mbs2.mbs1_ÏÉÅÌíàÎ™Ö AS mbs2_ÏÉÅÌíàÎ™Ö,
                       mbs2.mbs1_Í∞ÄÍ≤© AS mbs2_Í∞ÄÍ≤©,
                       mbs2.mbs1_Ïπ¥ÌÖåÍ≥†Î¶¨ AS mbs2_Ïπ¥ÌÖåÍ≥†Î¶¨
                FROM mbs_data2 mbs22
                LEFT JOIN mbs_data2 mbs2 
                    ON mbs22.ÏßÄÏ†êÎ™Ö = mbs2.ÏßÄÏ†êÎ™Ö 
                    AND mbs22.user_id = mbs2.user_id 
                    AND mbs2.mbs1_ÌöåÏ∞® = mbs22.mbs1_ÌöåÏ∞® + 1
            )
            
            SELECT 
                mbs1_ÏÉÅÌíàÎ™Ö AS "ÏÉÅÌíàÎ™Ö",
                mbs1_ÏãúÏûëÏùº AS "ÏãúÏûëÏùº",
                mbs1_Ï¢ÖÎ£åÏùº AS "Ï¢ÖÎ£åÏùº",
                mbs1_Í≤∞Ï†úÏùº AS "Í≤∞Ï†úÏùº",
                mbs1_Í∞ÄÍ≤© AS "Í∞ÄÍ≤©",
                ÏßÄÏ†êÎ™Ö AS "ÏßÄÏ†êÎ™Ö",
                status AS "ÏÉÅÌÉú",
                mbs1_ÌöåÏ∞® AS "ÌöåÏ∞®",
                mbs2_id AS "Îã§ÏùåÎ©§Î≤ÑÏã≠ID",
                mbs2_ÏÉÅÌíàÎ™Ö AS "Îã§ÏùåÏÉÅÌíàÎ™Ö", 
                mbs2_Ï¢ÖÎ£åÏùº AS "Îã§ÏùåÏ¢ÖÎ£åÏùº"
            FROM 
                mbs_data3
            ORDER BY 
                mbs1_ÌöåÏ∞® ASC;
            """
            
            cursor.execute(history_query, (phone,))
            results = cursor.fetchall()
            
            history_list = []
            has_future_membership = False
            future_end_date = None
            
            for row in results:
                history_item = {
                    'membership_type': row[0],
                    'start_date': row[1].strftime('%Y-%m-%d') if row[1] else None,
                    'end_date': row[2].strftime('%Y-%m-%d') if row[2] else None,
                    'payment_date': row[3].strftime('%Y-%m-%d') if row[3] else None,
                    'price': row[4],
                    'branch_name': row[5],
                    'status': row[6],
                    'sequence': row[7],  # ÌöåÏ∞®
                    'next_membership_id': row[8],
                    'next_membership_name': row[9],
                    'next_end_date': row[10].strftime('%Y-%m-%d') if row[10] else None
                }
                history_list.append(history_item)
                
                # ÌòÑÏû¨ Active Î©§Î≤ÑÏã≠Ïóê Îã§Ïùå Î©§Î≤ÑÏã≠Ïù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
                if history_item['status'] == 'active' and history_item['next_membership_id']:
                    has_future_membership = True
                    future_end_date = history_item['next_end_date']
            
            print(f"üìã Í∞úÏÑ†Îêú Î©§Î≤ÑÏã≠ ÌûàÏä§ÌÜ†Î¶¨ Ï°∞Ìöå ÏôÑÎ£å: {len(history_list)}Í±¥")
            
            # Ïû¨Îì±Î°ù Ïó¨Î∂Ä Î∂ÑÏÑù (Í∞úÏÑ†Îêú Î°úÏßÅ)
            active_count = len([h for h in history_list if h['status'] == 'active'])
            expired_count = len([h for h in history_list if h['status'] == 'expired'])
            total_count = len(history_list)
            
            # ÌòÑÏû¨ Active Î©§Î≤ÑÏã≠ Ïù¥ÌõÑÏùò Î©§Î≤ÑÏã≠ Ïó¨Î∂Ä ÌôïÏù∏ (ÌöåÏ∞® Í∏∞Î∞ò)
            future_membership_status = "X"  # Í∏∞Î≥∏Í∞í: ÏóÜÏùå
            
            if has_future_membership and future_end_date:
                future_membership_status = f"O ({future_end_date})"
            
            analysis = {
                'total_memberships': total_count,
                'active_memberships': active_count,
                'expired_memberships': expired_count,
                'has_reregistration': total_count > 1,  # Í∏∞Ï°¥ Ìò∏ÌôòÏÑ± Ïú†ÏßÄ
                'future_membership_status': future_membership_status,  # ÏÉàÎ°úÏö¥ ÌëúÏãú Î∞©Ïãù
                'membership_history': history_list
            }
            
            print(f"üîç Í∞úÏÑ†Îêú Ïû¨Îì±Î°ù Î∂ÑÏÑù: Ï¥ù {total_count}Ìöå, ÎØ∏Îûò Î©§Î≤ÑÏã≠: {future_membership_status}")
            
        conn.close()
        return analysis
        
    except Exception as e:
        print(f"‚ùå Í∞úÏÑ†Îêú DB Î©§Î≤ÑÏã≠ ÌûàÏä§ÌÜ†Î¶¨ Ï°∞Ìöå Ïã§Ìå®: {e}")
        return {
            'total_memberships': 0,
            'active_memberships': 0,
            'expired_memberships': 0,
            'has_reregistration': False,
            'future_membership_status': 'X',
            'membership_history': []
        }

def check_membership_status_dummy(phone, applicant_id):
    """ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Î•º ÏÇ¨Ïö©Ìïú Î©§Î≤ÑÏã≠ Ï°∞Ìöå (Í∏∞Ï°¥ Î°úÏßÅ)"""
    dummy_membership = {
        'is_member': phone.startswith('010-1'),
        'membership_type': 'GOLD' if phone.startswith('010-1') else None,
        'expiry_date': '2025-12-31' if phone.startswith('010-1') else None,
        'member_id': 'M' + phone.replace('-', '')[-6:] if phone.startswith('010-1') else None
    }
    
    save_membership_to_sqlite(applicant_id, phone, dummy_membership)
    return dummy_membership

def save_membership_to_sqlite(applicant_id, phone, membership_data):
    """SQLiteÏóê Î©§Î≤ÑÏã≠ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• (ÏßÄÏ†êÎ™Ö Ìè¨Ìï®)"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # Í∏∞Ï°¥ ÌÖåÏù¥Î∏îÏóê ÏßÄÏ†êÎ™Ö Ïª¨ÎüºÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
        cursor.execute("PRAGMA table_info(membership_data)")
        columns = [column[1] for column in cursor.fetchall()]
        
        # Î©§Î≤ÑÏã≠ Ï†ïÎ≥¥ ÌÖåÏù¥Î∏î ÏÉùÏÑ± ÎòêÎäî ÏóÖÎç∞Ïù¥Ìä∏ (ÏßÄÏ†êÎ™Ö, ÏãúÏûëÏùº Ï∂îÍ∞Ä)
        if 'membership_data' not in [table[0] for table in cursor.execute("SELECT name FROM sqlite_master WHERE type='table'").fetchall()]:
            # ÌÖåÏù¥Î∏îÏù¥ ÏóÜÏúºÎ©¥ ÏÉàÎ°ú ÏÉùÏÑ± (ÏßÄÏ†êÎ™Ö Ìè¨Ìï®)
            cursor.execute('''
            CREATE TABLE membership_data (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                applicant_id INTEGER,
                phone TEXT,
                is_member BOOLEAN,
                membership_type TEXT,
                member_id TEXT,
                expiry_date TEXT,
                start_date TEXT,
                branch_name TEXT,
                checked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (applicant_id) REFERENCES applicants (id)
            )
            ''')
        else:
            # Í∏∞Ï°¥ ÌÖåÏù¥Î∏îÏóê Ïª¨Îüº Ï∂îÍ∞Ä (ÏóÜÏúºÎ©¥)
            if 'branch_name' not in columns:
                cursor.execute('ALTER TABLE membership_data ADD COLUMN branch_name TEXT')
            if 'start_date' not in columns:
                cursor.execute('ALTER TABLE membership_data ADD COLUMN start_date TEXT')
        
        # Î©§Î≤ÑÏã≠ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• (ÏßÄÏ†êÎ™Ö, ÏãúÏûëÏùº Ìè¨Ìï®)
        cursor.execute('''
            INSERT INTO membership_data 
            (applicant_id, phone, is_member, membership_type, member_id, expiry_date, start_date, branch_name)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            applicant_id,
            phone,
            membership_data['is_member'],
            membership_data['membership_type'],
            membership_data['member_id'],
            membership_data['expiry_date'],
            membership_data.get('start_date'),
            membership_data.get('branch_name')
        ))
        
        conn.commit()
        conn.close()
        print(f"‚úÖ SQLiteÏóê Î©§Î≤ÑÏã≠ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏôÑÎ£å (ÏßÄÏ†êÎ™Ö: {membership_data.get('branch_name', 'N/A')})")
        
    except Exception as e:
        print(f"‚ùå SQLite Î©§Î≤ÑÏã≠ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ïã§Ìå®: {e}")

# Í∏∞Ï°¥ check_membership_status Ìï®ÏàòÎ•º Ïã§Ï†ú DB ÏÇ¨Ïö©ÏúºÎ°ú Î≥ÄÍ≤Ω
def check_membership_status(phone, applicant_id):
    """Î©§Î≤ÑÏã≠ ÏÉÅÌÉú Ï°∞Ìöå (Ïã§Ï†ú DB Ïö∞ÏÑ†, Ïò§Î•òÏãú ÎçîÎØ∏)"""
    return check_membership_status_real(phone, applicant_id)

# Î∞±Í∑∏ÎùºÏö¥Îìú Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏûëÏóÖ (Î≥ëÎ†¨Ï≤òÎ¶¨Î°ú Í∞úÏÑ†)
def background_data_collection(applicant_id, instagram_url, phone):
    """Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ïù∏Ïä§ÌÉÄÍ∑∏Îû® Îç∞Ïù¥ÌÑ∞ + Î©§Î≤ÑÏã≠ Ï°∞ÌöåÎ•º Î≥ëÎ†¨ Ï≤òÎ¶¨ + Íµ¨Í∏Ä ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏"""
    print(f"üöÄ Î≥ëÎ†¨ Î∞±Í∑∏ÎùºÏö¥Îìú Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏãúÏûë - ID: {applicant_id}")
    
    # Î≥ëÎ†¨ Ï≤òÎ¶¨Î•º ÏúÑÌïú Í≤∞Í≥º Ï†ÄÏû• Î≥ÄÏàò
    instagram_result = {}
    membership_result = {}
    membership_history = {}
    
    def collect_instagram_parallel():
        """Ïù∏Ïä§ÌÉÄÍ∑∏Îû® Îç∞Ïù¥ÌÑ∞ ÏàòÏßë (Î≥ëÎ†¨)"""
        try:
            print(f"üì∏ Ïù∏Ïä§ÌÉÄÍ∑∏Îû® Ïä§ÌÅ¨ÎûòÌïë ÏãúÏûë (Î≥ëÎ†¨): {instagram_url}")
            collect_instagram_data(instagram_url, applicant_id)
            instagram_result['status'] = 'completed'
            print(f"‚úÖ Ïù∏Ïä§ÌÉÄÍ∑∏Îû® Ïä§ÌÅ¨ÎûòÌïë ÏôÑÎ£å (Î≥ëÎ†¨)")
        except Exception as e:
            print(f"‚ùå Ïù∏Ïä§ÌÉÄÍ∑∏Îû® Ïä§ÌÅ¨ÎûòÌïë Ïã§Ìå® (Î≥ëÎ†¨): {e}")
            instagram_result['status'] = 'failed'
            instagram_result['error'] = str(e)
    
    def collect_membership_parallel():
        """Î©§Î≤ÑÏã≠ Îç∞Ïù¥ÌÑ∞ ÏàòÏßë (Î≥ëÎ†¨)"""
        try:
            print(f"üí≥ Î©§Î≤ÑÏã≠ Ï°∞Ìöå ÏãúÏûë (Î≥ëÎ†¨): {phone}")
            # Í∏∞Î≥∏ Î©§Î≤ÑÏã≠ ÏÉÅÌÉú Ï°∞Ìöå
            membership_result.update(check_membership_status(phone, applicant_id))
            print(f"üìú Î©§Î≤ÑÏã≠ ÌûàÏä§ÌÜ†Î¶¨ Ï°∞Ìöå ÏãúÏûë (Î≥ëÎ†¨): {phone}")
            # Î©§Î≤ÑÏã≠ ÌûàÏä§ÌÜ†Î¶¨ Ï°∞Ìöå
            membership_history.update(get_membership_history_real(phone))
            print(f"‚úÖ Î©§Î≤ÑÏã≠ Ï°∞Ìöå ÏôÑÎ£å (Î≥ëÎ†¨)")
        except Exception as e:
            print(f"‚ùå Î©§Î≤ÑÏã≠ Ï°∞Ìöå Ïã§Ìå® (Î≥ëÎ†¨): {e}")
            membership_result['error'] = str(e)
            membership_history['error'] = str(e)
    
    # ThreadPoolExecutorÎ°ú Î≥ëÎ†¨ Ïã§Ìñâ
    start_time = time.time()
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor:
        # Îëê ÏûëÏóÖÏùÑ ÎèôÏãúÏóê Ïã§Ìñâ
        future_instagram = executor.submit(collect_instagram_parallel)
        future_membership = executor.submit(collect_membership_parallel)
        
        # Î™®Îì† ÏûëÏóÖ ÏôÑÎ£åÍπåÏßÄ ÎåÄÍ∏∞
        concurrent.futures.wait([future_instagram, future_membership])
    
    elapsed_time = time.time() - start_time
    print(f"‚ö° Î≥ëÎ†¨ Ï≤òÎ¶¨ ÏôÑÎ£å - ÏÜåÏöîÏãúÍ∞Ñ: {elapsed_time:.2f}Ï¥à")
    
    # Ïû†Ïãú ÎåÄÍ∏∞ ÌõÑ Íµ¨Í∏Ä ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏
    time.sleep(1)
    
    # ÏµúÏã† Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏ÏôÄÏÑú Íµ¨Í∏Ä ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # Î©§Î≤ÑÏã≠ ÌûàÏä§ÌÜ†Î¶¨ Ï†ïÎ≥¥Î•º SQLiteÏóê Ï†ÄÏû• (ÏÉà ÌÖåÏù¥Î∏î)
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS membership_history_data (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            applicant_id INTEGER,
            phone TEXT,
            total_memberships INTEGER,
            active_memberships INTEGER,
            expired_memberships INTEGER,
            has_reregistration BOOLEAN,
            future_membership_status TEXT,
            history_json TEXT,
            checked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (applicant_id) REFERENCES applicants (id)
        )
        ''')
        
        # Í∏∞Ï°¥ ÌÖåÏù¥Î∏îÏóê ÏÉà Ïª¨Îüº Ï∂îÍ∞Ä (ÏóÜÏúºÎ©¥)
        try:
            cursor.execute('ALTER TABLE membership_history_data ADD COLUMN future_membership_status TEXT')
        except sqlite3.OperationalError:
            pass  # Ïª¨ÎüºÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎ©¥ Î¨¥Ïãú
        
        # Î©§Î≤ÑÏã≠ ÌûàÏä§ÌÜ†Î¶¨ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• (Ïò§Î•òÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞ÏóêÎßå)
        if membership_history and not membership_history.get('error'):
            import json
            cursor.execute('''
                INSERT OR REPLACE INTO membership_history_data 
                (applicant_id, phone, total_memberships, active_memberships, expired_memberships, has_reregistration, future_membership_status, history_json)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                applicant_id,
                phone,
                membership_history.get('total_memberships', 0),
                membership_history.get('active_memberships', 0),
                membership_history.get('expired_memberships', 0),
                membership_history.get('has_reregistration', False),
                membership_history.get('future_membership_status', 'X'),
                json.dumps(membership_history.get('membership_history', []), ensure_ascii=False, default=str)
            ))
        
        cursor.execute('''
        SELECT 
            a.*,
            i.followers_count, i.media_count, i.username as ig_username, i.account_type, i.collected_at,
            m.is_member, m.membership_type, m.member_id, m.expiry_date, m.start_date, m.branch_name, m.checked_at,
            mh.total_memberships, mh.has_reregistration, mh.future_membership_status
        FROM applicants a
        LEFT JOIN instagram_data i ON a.id = i.applicant_id
        LEFT JOIN membership_data m ON a.id = m.applicant_id
        LEFT JOIN membership_history_data mh ON a.id = mh.applicant_id
        WHERE a.id = ?
        ''', (applicant_id,))
        
        row = cursor.fetchone()
        if row:
            applicant_data = {
                'experience_group': row[1],
                'created_at': row[10],
                'name': row[2],
                'phone': row[3],
                'instagram_url': row[4],
                'address_full': row[8],
                'agrees_privacy': bool(row[9]),
                'followers_count': row[11],
                'media_count': row[12],
                'ig_username': row[13],
                'account_type': row[14],
                'instagram_collected_at': row[15],
                'is_member': bool(row[16]) if row[16] is not None else False,
                'membership_type': row[17],
                'member_id': row[18],
                'expiry_date': row[19],
                'start_date': row[20],
                'branch_name': row[21],
                'membership_checked_at': row[22],
                'total_memberships': row[23] or 0,
                'has_reregistration': bool(row[24]) if row[24] is not None else False,
                'future_membership_status': row[25] or 'X',
                # Ïã§Ï†ú Î©§Î≤ÑÏã≠ Ï°∞Ìöå Í≤∞Í≥º 
                'member_name': membership_result.get('member_name'),
                'member_birth': membership_result.get('member_birth'),
                'membership_start_date': row[20] or membership_result.get('start_date'),
                'membership_end_date': row[19] or membership_result.get('end_date')
            }
            
            # Íµ¨Í∏Ä ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏
            update_google_sheet(applicant_data)
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Íµ¨Í∏Ä ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: {e}")
    
    print(f"üéâ Î≥ëÎ†¨ Î∞±Í∑∏ÎùºÏö¥Îìú Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏôÑÎ£å - ID: {applicant_id}, Ï¥ù ÏÜåÏöîÏãúÍ∞Ñ: {time.time() - start_time:.2f}Ï¥à")

# Íµ¨Í∏Ä ÏãúÌä∏ Ïó∞Îèô ÏÑ§Ï†ï
GOOGLE_SHEETS_CREDENTIALS_FILE = 'google_credentials.json'  # ÏÑúÎπÑÏä§ Í≥ÑÏ†ï Ïù∏Ï¶ù ÌååÏùº
GOOGLE_SHEETS_URL = None  # ÌôòÍ≤ΩÎ≥ÄÏàòÎÇò ÏÑ§Ï†ïÏóêÏÑú Í∞ÄÏ†∏Ïò¨ ÏòàÏ†ï

def setup_google_sheets():
    """Íµ¨Í∏Ä ÏãúÌä∏ Ïó∞Îèô ÏÑ§Ï†ï (ÌôòÍ≤ΩÎ≥ÄÏàò ÏßÄÏõê)"""
    try:
        # ÌôòÍ≤ΩÎ≥ÄÏàòÏóêÏÑú Google credentials JSON ÌôïÏù∏ (Vercel Î∞∞Ìè¨Ïö©)
        google_creds_json = os.getenv('GOOGLE_CREDENTIALS_JSON')
        
        if google_creds_json:
            # ÌôòÍ≤ΩÎ≥ÄÏàòÏóêÏÑú JSON Î¨∏ÏûêÏó¥Î°ú ÏÑ§Ï†ïÎêú Í≤ΩÏö∞
            import tempfile
            with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as tmp_file:
                tmp_file.write(google_creds_json)
                tmp_credentials_file = tmp_file.name
            
            scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
            creds = Credentials.from_service_account_file(tmp_credentials_file, scopes=scope)
            os.unlink(tmp_credentials_file)  # ÏûÑÏãú ÌååÏùº ÏÇ≠Ï†ú
            
        elif os.path.exists(GOOGLE_SHEETS_CREDENTIALS_FILE):
            # Î°úÏª¨ ÌååÏùºÏóêÏÑú ÏùΩÍ∏∞
            scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
            creds = Credentials.from_service_account_file(GOOGLE_SHEETS_CREDENTIALS_FILE, scopes=scope)
            
        else:
            print("‚ö†Ô∏è  Íµ¨Í∏Ä ÏãúÌä∏ Ïù∏Ï¶ù ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§. ÏàòÎèôÏúºÎ°ú ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî.")
            return None
            
        client = gspread.authorize(creds)
        print("‚úÖ Íµ¨Í∏Ä ÏãúÌä∏ Ïó∞Îèô Ï§ÄÎπÑ ÏôÑÎ£å")
        return client
        
    except Exception as e:
        print(f"‚ùå Íµ¨Í∏Ä ÏãúÌä∏ Ïó∞Îèô Ïã§Ìå®: {e}")
        return None

def create_or_get_spreadsheet(client, spreadsheet_name="BUTFIT Ï≤¥ÌóòÎã® ÏßÄÏõêÏûê Í¥ÄÎ¶¨"):
    """Íµ¨Í∏Ä ÏãúÌä∏ ÏÉùÏÑ± ÎòêÎäî Í∏∞Ï°¥ ÏãúÌä∏ Í∞ÄÏ†∏Ïò§Í∏∞"""
    try:
        # Í∏∞Ï°¥ ÏßÄÏ†ïÎêú ÏãúÌä∏ ID ÏÇ¨Ïö© (Drive Ïö©Îüâ Î¨∏Ï†úÎ°ú ÏÉà ÏÉùÏÑ± Î∂àÍ∞Ä)
        EXISTING_SPREADSHEET_ID = "1Z2VuA49QeQxQRmYVDk6nMaj6mU_UtmxXDzizUgLBEfQ"
        
        try:
            # Í∏∞Ï°¥ ÏãúÌä∏ IDÎ°ú ÏßÅÏ†ë Ï†ëÍ∑º
            spreadsheet = client.open_by_key(EXISTING_SPREADSHEET_ID)
            print(f"‚úÖ Í∏∞Ï°¥ Íµ¨Í∏Ä ÏãúÌä∏ Ïó∞Í≤∞: {spreadsheet.url}")
            return spreadsheet
        except Exception as e:
            print(f"‚ö†Ô∏è ÏßÄÏ†ïÎêú ÏãúÌä∏ Ï†ëÍ∑º Ïã§Ìå®, Ïù¥Î¶ÑÏúºÎ°ú Ïû¨ÏãúÎèÑ: {e}")
            # ÏãúÌä∏ Ïù¥Î¶ÑÏúºÎ°ú Ï∞æÍ∏∞ ÏãúÎèÑ
            try:
                spreadsheet = client.open(spreadsheet_name)
                print(f"‚úÖ Ïù¥Î¶ÑÏúºÎ°ú Íµ¨Í∏Ä ÏãúÌä∏ Ïó∞Í≤∞: {spreadsheet.url}")
                return spreadsheet
            except gspread.SpreadsheetNotFound:
                # ÏÉà ÏãúÌä∏ ÏÉùÏÑ± (Ïö©Îüâ Î¨∏Ï†úÏãú Ïã§Ìå®Ìï† Ïàò ÏûàÏùå)
                spreadsheet = client.create(spreadsheet_name)
            
            # ÏÉàÎ°úÏö¥ ÏñëÏãùÏóê ÎßûÎäî Ìó§Îçî ÏÑ§Ï†ï
            worksheet = spreadsheet.sheet1
            headers = [
                'Ï≤¥ÌóòÎã®', 'ÏßÄÏõêÏùºÏãú', 'Ïù¥Î¶Ñ', 'Ï†ÑÌôîÎ≤àÌò∏', 'Ïù∏Ïä§ÌÉÄÍ∑∏Îû®ID', 'Ïù∏Ïä§ÌÉÄÎßÅÌÅ¨',
                'ÌåîÎ°úÏõåÏàò', 'Í≤åÏãúÎ¨ºÏàò', 'Ï£ºÏÜå', 'ÏßÄÏ†êÎ™Ö', 'Î©§Î≤ÑÏã≠ÏÉÅÌíàÎ™Ö',
                'ÏãúÏûëÏùº', 'Ï¢ÖÎ£åÏùº', 'Ïû¨Îì±Î°ùÏó¨Î∂Ä'
            ]
            worksheet.append_row(headers)
            
            # Ìó§Îçî Ïä§ÌÉÄÏùºÎßÅ (14Í∞ú Ïª¨Îüº)
            worksheet.format('A1:N1', {
                'backgroundColor': {'red': 0.2, 'green': 0.6, 'blue': 0.2},
                'textFormat': {'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}, 'bold': True}
            })
            
            print(f"‚úÖ ÏÉà Íµ¨Í∏Ä ÏãúÌä∏ ÏÉùÏÑ±: {spreadsheet.url}")
            return spreadsheet
            
    except Exception as e:
        print(f"‚ùå Íµ¨Í∏Ä ÏãúÌä∏ ÏÉùÏÑ±/Ïó∞Í≤∞ Ïã§Ìå®: {e}")
        return None

def update_google_sheet(applicant_data):
    """Íµ¨Í∏Ä ÏãúÌä∏Ïóê ÏßÄÏõêÏûê Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏"""
    try:
        client = setup_google_sheets()
        if not client:
            return False
            
        spreadsheet = create_or_get_spreadsheet(client)
        if not spreadsheet:
            return False
            
        worksheet = spreadsheet.sheet1
        
        # ÏÉàÎ°úÏö¥ ÏñëÏãùÏóê ÎßûÎäî Îç∞Ïù¥ÌÑ∞ Ìñâ ÏÉùÏÑ±
        # Ï≤¥ÌóòÎã® / ÏßÄÏõêÏùºÏãú / Ïù¥Î¶Ñ/ Ï†ÑÌôîÎ≤àÌò∏/Ïù∏Ïä§ÌÉÄÍ∑∏Îû®ID/Ïù∏Ïä§ÌÉÄÎßÅÌÅ¨/ÌåîÎ°úÏõåÏàò/Í≤åÏãúÎ¨ºÏàò/Ï£ºÏÜå/ÏßÄÏ†êÎ™Ö/Î©§Î≤ÑÏã≠ÏÉÅÌíàÎ™Ö/ÏãúÏûëÏùº/Ï¢ÖÎ£åÏùº/Ïû¨Îì±Î°ùÏó¨Î∂Ä
        row_data = [
            applicant_data.get('experience_group', ''),             # Ï≤¥ÌóòÎã®
            applicant_data.get('created_at', ''),                    # ÏßÄÏõêÏùºÏãú
            applicant_data.get('name', ''),                          # Ïù¥Î¶Ñ
            applicant_data.get('phone', ''),                         # Ï†ÑÌôîÎ≤àÌò∏
            applicant_data.get('ig_username', ''),                   # Ïù∏Ïä§ÌÉÄÍ∑∏Îû®ID
            applicant_data.get('instagram_url', ''),                 # Ïù∏Ïä§ÌÉÄÎßÅÌÅ¨
            applicant_data.get('followers_count', '') or '0',        # ÌåîÎ°úÏõåÏàò
            applicant_data.get('media_count', '') or '0',            # Í≤åÏãúÎ¨ºÏàò
            applicant_data.get('address_full', ''),                  # Ï£ºÏÜå
            applicant_data.get('branch_name', ''),                   # ÏßÄÏ†êÎ™Ö
            applicant_data.get('membership_type', ''),               # Î©§Î≤ÑÏã≠ÏÉÅÌíàÎ™Ö
            str(applicant_data.get('membership_start_date', '')) if applicant_data.get('membership_start_date') else '',  # ÏãúÏûëÏùº
            str(applicant_data.get('membership_end_date', '')) if applicant_data.get('membership_end_date') else '',      # Ï¢ÖÎ£åÏùº
            applicant_data.get('future_membership_status', 'X')  # ÎØ∏Îûò Î©§Î≤ÑÏã≠ Ïó¨Î∂Ä (X ÎòêÎäî O (Ï¢ÖÎ£åÏùº))
        ]
        
        # ÏãúÌä∏Ïóê Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
        worksheet.append_row(row_data)
        
        print(f"‚úÖ Íµ¨Í∏Ä ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å: {applicant_data.get('name')} (Ïû¨Îì±Î°ù: {applicant_data.get('has_reregistration', False)})")
        return True
        
    except Exception as e:
        print(f"‚ùå Íµ¨Í∏Ä ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: {e}")
        return False

def sync_all_data_to_google_sheet():
    """Î™®Îì† ÏßÄÏõêÏûê Îç∞Ïù¥ÌÑ∞Î•º Íµ¨Í∏Ä ÏãúÌä∏Ïóê ÎèôÍ∏∞Ìôî"""
    try:
        client = setup_google_sheets()
        if not client:
            return False
            
        spreadsheet = create_or_get_spreadsheet(client)
        if not spreadsheet:
            return False
            
        worksheet = spreadsheet.sheet1
        
        # Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Î™®Îëê ÏÇ≠Ï†ú (Ìó§Îçî Ï†úÏô∏)
        worksheet.clear()
        
        # ÏÉàÎ°úÏö¥ ÏñëÏãùÏóê ÎßûÎäî Ìó§Îçî Ïû¨ÏÑ§Ï†ï
        headers = [
            'Ï≤¥ÌóòÎã®', 'ÏßÄÏõêÏùºÏãú', 'Ïù¥Î¶Ñ', 'Ï†ÑÌôîÎ≤àÌò∏', 'Ïù∏Ïä§ÌÉÄÍ∑∏Îû®ID', 'Ïù∏Ïä§ÌÉÄÎßÅÌÅ¨',
            'ÌåîÎ°úÏõåÏàò', 'Í≤åÏãúÎ¨ºÏàò', 'Ï£ºÏÜå', 'ÏßÄÏ†êÎ™Ö', 'Î©§Î≤ÑÏã≠ÏÉÅÌíàÎ™Ö',
            'ÏãúÏûëÏùº', 'Ï¢ÖÎ£åÏùº', 'Ïû¨Îì±Î°ùÏó¨Î∂Ä'
        ]
        worksheet.append_row(headers)
        
        # Î™®Îì† ÏßÄÏõêÏûê Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ (Î©§Î≤ÑÏã≠ ÌûàÏä§ÌÜ†Î¶¨ Ìè¨Ìï®)
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
        SELECT 
            a.*,
            i.followers_count, i.media_count, i.username as ig_username, i.account_type, i.collected_at,
            m.is_member, m.membership_type, m.member_id, m.expiry_date, m.start_date, m.branch_name, m.checked_at,
            mh.total_memberships, mh.has_reregistration, mh.future_membership_status
        FROM applicants a
        LEFT JOIN instagram_data i ON a.id = i.applicant_id
        LEFT JOIN membership_data m ON a.id = m.applicant_id
        LEFT JOIN membership_history_data mh ON a.id = mh.applicant_id
        ORDER BY a.created_at DESC
        ''')
        
        # ÏÉàÎ°úÏö¥ ÏñëÏãùÏóê ÎßûÎäî Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò Î∞è ÏãúÌä∏Ïóê Ï∂îÍ∞Ä
        all_rows = []
        for row in cursor.fetchall():
            row_data = [
                row[1] or '',                                         # Ï≤¥ÌóòÎã® (experience_group)
                row[10] or '',                                        # ÏßÄÏõêÏùºÏãú (created_at)
                row[2] or '',                                         # Ïù¥Î¶Ñ
                row[3] or '',                                         # Ï†ÑÌôîÎ≤àÌò∏  
                row[13] or '',                                        # Ïù∏Ïä§ÌÉÄÍ∑∏Îû®ID
                row[4] or '',                                         # Ïù∏Ïä§ÌÉÄÎßÅÌÅ¨
                row[11] or '0',                                       # ÌåîÎ°úÏõåÏàò
                row[12] or '0',                                       # Í≤åÏãúÎ¨ºÏàò
                row[8] or '',                                         # Ï£ºÏÜå (address_full)
                row[21] or '',                                        # ÏßÄÏ†êÎ™Ö
                row[17] or '',                                        # Î©§Î≤ÑÏã≠ÏÉÅÌíàÎ™Ö
                str(row[20]) if row[20] else '',                      # ÏãúÏûëÏùº
                str(row[19]) if row[19] else '',                      # Ï¢ÖÎ£åÏùº
                row[25] or 'X'                                        # ÎØ∏Îûò Î©§Î≤ÑÏã≠ Ïó¨Î∂Ä (X ÎòêÎäî O (Ï¢ÖÎ£åÏùº))
            ]
            all_rows.append(row_data)
        
        # ÏùºÍ¥Ñ ÏóÖÎç∞Ïù¥Ìä∏
        if all_rows:
            worksheet.append_rows(all_rows)
        
        conn.close()
        
        # Ìó§Îçî Ïä§ÌÉÄÏùºÎßÅ (14Í∞ú Ïª¨Îüº)
        worksheet.format('A1:N1', {
            'backgroundColor': {'red': 0.2, 'green': 0.6, 'blue': 0.2},
            'textFormat': {'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}, 'bold': True}
        })
        
        print(f"‚úÖ Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Íµ¨Í∏Ä ÏãúÌä∏ ÎèôÍ∏∞Ìôî ÏôÑÎ£å: {len(all_rows)}Í±¥")
        return True
        
    except Exception as e:
        print(f"‚ùå Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî Ïã§Ìå®: {e}")
        return False

@app.route('/')
def home():
    """ÌôàÌéòÏù¥ÏßÄ"""
    return HTML_TEMPLATE

@app.route('/api/applicants', methods=['GET', 'POST'])
def api_applicants():
    """ÏßÄÏõêÏûê API"""
    
    if request.method == 'GET':
        # ÏßÄÏõêÏûê Î™©Î°ù Ï°∞Ìöå (Ïù∏Ïä§ÌÉÄÍ∑∏Îû® + Î©§Î≤ÑÏã≠ Îç∞Ïù¥ÌÑ∞ Ìè¨Ìï®)
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
        SELECT 
            a.*,
            i.followers_count, i.media_count, i.username as ig_username, i.account_type,
            m.is_member, m.membership_type, m.member_id, m.expiry_date, m.start_date, m.branch_name,
            mh.total_memberships, mh.has_reregistration, mh.future_membership_status
        FROM applicants a
        LEFT JOIN instagram_data i ON a.id = i.applicant_id
        LEFT JOIN membership_data m ON a.id = m.applicant_id
        LEFT JOIN membership_history_data mh ON a.id = mh.applicant_id
        ORDER BY a.created_at DESC
        ''')
        
        applicants = []
        for row in cursor.fetchall():
            applicants.append({
                'id': row[0],
                'experience_group': row[1],
                'name': row[2],
                'phone': row[3],
                'instagram_url': row[4],
                'address_zipcode': row[5],
                'address_main': row[6],
                'address_detail': row[7],
                'address_full': row[8],
                'agrees_privacy': bool(row[9]),
                'created_at': row[10],
                # Ïù∏Ïä§ÌÉÄÍ∑∏Îû® Îç∞Ïù¥ÌÑ∞
                'followers_count': row[11],
                'media_count': row[12], 
                'ig_username': row[13],
                'account_type': row[14],
                # Î©§Î≤ÑÏã≠ Îç∞Ïù¥ÌÑ∞
                'is_member': bool(row[15]) if row[15] is not None else None,
                'membership_type': row[16],
                'member_id': row[17],
                'expiry_date': row[18],
                'start_date': row[19],
                'branch_name': row[20],
                # Î©§Î≤ÑÏã≠ ÌûàÏä§ÌÜ†Î¶¨
                'total_memberships': row[21] or 0,
                'has_reregistration': bool(row[22]) if row[22] is not None else False,
                'future_membership_status': row[23] or 'X'
            })
        
        conn.close()
        return jsonify({'applicants': applicants, 'count': len(applicants)})
    
    elif request.method == 'POST':
        # ÏÉà ÏßÄÏõêÏûê ÏÉùÏÑ±
        data = request.get_json()
        
        try:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO applicants (experience_group, name, phone, instagram_url, address_zipcode, address_main, address_detail, address_full, agrees_privacy)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                data.get('experience_group'),
                data.get('name'),
                data.get('phone'),
                data.get('instagram_url'),
                data.get('address_zipcode'),
                data.get('address_main'),
                data.get('address_detail'),
                data.get('address_full'),
                data.get('agrees_privacy', False)
            ))
            
            conn.commit()
            applicant_id = cursor.lastrowid
            conn.close()
            
            # Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ïù∏Ïä§ÌÉÄÍ∑∏Îû® Îç∞Ïù¥ÌÑ∞ + Î©§Î≤ÑÏã≠ Ï°∞Ìöå Ïã§Ìñâ
            thread = threading.Thread(
                target=background_data_collection,
                args=(applicant_id, data.get('instagram_url'), data.get('phone'))
            )
            thread.daemon = True
            thread.start()
            
            return jsonify({'success': True, 'id': applicant_id}), 201
            
        except sqlite3.IntegrityError:
            return jsonify({'error': 'Ïù¥ÎØ∏ Îì±Î°ùÎêú Ï†ïÎ≥¥ÏûÖÎãàÎã§. Ï§ëÎ≥µ ÏßÄÏõêÏùÄ Î∂àÍ∞ÄÎä•Ìï©ÎãàÎã§.'}), 400
        except Exception as e:
            return jsonify({'error': str(e)}), 500

# Í¥ÄÎ¶¨ÏûêÏö© ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå API Ï∂îÍ∞Ä
@app.route('/api/admin/applicants')
def admin_applicants():
    """Í¥ÄÎ¶¨ÏûêÏö© ÏÉÅÏÑ∏ ÏßÄÏõêÏûê Îç∞Ïù¥ÌÑ∞"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT 
        a.*,
        i.followers_count, i.media_count, i.username, i.account_type, i.collected_at,
        m.is_member, m.membership_type, m.member_id, m.expiry_date, m.start_date, m.branch_name, m.checked_at,
        mh.total_memberships, mh.has_reregistration, mh.future_membership_status
    FROM applicants a
    LEFT JOIN instagram_data i ON a.id = i.applicant_id
    LEFT JOIN membership_data m ON a.id = m.applicant_id
    LEFT JOIN membership_history_data mh ON a.id = mh.applicant_id
    ORDER BY a.created_at DESC
    ''')
    
    applicants = []
    for row in cursor.fetchall():
        applicant = {
            'id': row[0],
            'experience_group': row[1],
            'name': row[2],
            'phone': row[3],
            'instagram_url': row[4],
            'address_full': row[8],
            'agrees_privacy': bool(row[9]),
            'created_at': row[10],
            'instagram_data': {
                'followers_count': row[11],
                'media_count': row[12],
                'username': row[13],
                'account_type': row[14],
                'collected_at': row[15]
            } if row[11] is not None else None,
            'membership_data': {
                'is_member': bool(row[16]) if row[16] is not None else None,
                'membership_type': row[17],
                'member_id': row[18],
                'expiry_date': row[19],
                'start_date': row[20],
                'branch_name': row[21],
                'checked_at': row[22]
            } if row[16] is not None else None,
            'membership_history': {
                'total_memberships': row[23] or 0,
                'has_reregistration': bool(row[24]) if row[24] is not None else False,
                'future_membership_status': row[25] or 'X'
            } if row[23] is not None else None
        }
        applicants.append(applicant)
    
    conn.close()
    return jsonify({'applicants': applicants, 'count': len(applicants)})

# Íµ¨Í∏Ä ÏãúÌä∏ ÎèôÍ∏∞Ìôî API Ï∂îÍ∞Ä
@app.route('/api/admin/sync-google-sheet')
def sync_google_sheet():
    """Í¥ÄÎ¶¨ÏûêÏö©: Íµ¨Í∏Ä ÏãúÌä∏ Ï†ÑÏ≤¥ ÎèôÍ∏∞Ìôî"""
    try:
        success = sync_all_data_to_google_sheet()
        if success:
            return jsonify({'success': True, 'message': 'Íµ¨Í∏Ä ÏãúÌä∏ ÎèôÍ∏∞Ìôî ÏôÑÎ£å'})
        else:
            return jsonify({'success': False, 'message': 'Íµ¨Í∏Ä ÏãúÌä∏ ÎèôÍ∏∞Ìôî Ïã§Ìå®'}), 500
    except Exception as e:
        return jsonify({'success': False, 'message': f'Ïò§Î•ò: {str(e)}'}), 500

# PostgreSQL Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ API Ï∂îÍ∞Ä
@app.route('/api/admin/test-postgres')
def test_postgres():
    """Í¥ÄÎ¶¨ÏûêÏö©: PostgreSQL Ïó∞Í≤∞ ÌÖåÏä§Ìä∏"""
    try:
        success = test_postgres_connection()
        if success:
            return jsonify({'success': True, 'message': 'PostgreSQL Ïó∞Í≤∞ ÏÑ±Í≥µ'})
        else:
            return jsonify({'success': False, 'message': 'PostgreSQL Ïó∞Í≤∞ Ïã§Ìå®'}), 500
    except Exception as e:
        return jsonify({'success': False, 'message': f'Ïò§Î•ò: {str(e)}'}), 500

@app.route('/api/admin/test-membership')
def test_membership():
    """Í¥ÄÎ¶¨ÏûêÏö©: Î©§Î≤ÑÏã≠ Ï°∞Ìöå ÌÖåÏä§Ìä∏"""
    try:
        test_phone = '010-1234-5678'  # ÌÖåÏä§Ìä∏Ïö© Ï†ÑÌôîÎ≤àÌò∏
        result = check_membership_status_real(test_phone, 0)
        return jsonify({
            'success': True, 
            'message': 'Î©§Î≤ÑÏã≠ Ï°∞Ìöå ÌÖåÏä§Ìä∏ ÏôÑÎ£å',
            'test_phone': test_phone,
            'result': result
        })
    except Exception as e:
        return jsonify({'success': False, 'message': f'Ïò§Î•ò: {str(e)}'}), 500

@app.route('/api/membership/history/<phone>')
def get_membership_history(phone):
    """Î©§Î≤ÑÏã≠ ÌûàÏä§ÌÜ†Î¶¨ Ï°∞Ìöå API (Ïû¨Îì±Î°ù Ïó¨Î∂Ä ÌôïÏù∏)"""
    try:
        # Ï†ÑÌôîÎ≤àÌò∏ ÌòïÏãù Ï†ïÍ∑úÌôî (ÌïòÏù¥Ìîà Ï∂îÍ∞Ä)
        if not '-' in phone and len(phone) == 11:
            formatted_phone = f"{phone[:3]}-{phone[3:7]}-{phone[7:]}"
        else:
            formatted_phone = phone
            
        result = get_membership_history_real(formatted_phone)
        
        return jsonify({
            'success': True,
            'phone': formatted_phone,
            'analysis': result
        })
    except Exception as e:
        return jsonify({'success': False, 'message': f'Ïò§Î•ò: {str(e)}'}), 500

@app.route('/api/admin/membership/bulk-history', methods=['POST'])
def get_bulk_membership_history():
    """Ïó¨Îü¨ Ï†ÑÌôîÎ≤àÌò∏Ïùò Î©§Î≤ÑÏã≠ ÌûàÏä§ÌÜ†Î¶¨ ÏùºÍ¥Ñ Ï°∞Ìöå"""
    try:
        data = request.get_json()
        phone_numbers = data.get('phone_numbers', [])
        
        if not phone_numbers:
            return jsonify({'error': 'Ï†ÑÌôîÎ≤àÌò∏ Î™©Î°ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.'}), 400
        
        results = {}
        for phone in phone_numbers:
            # Ï†ÑÌôîÎ≤àÌò∏ ÌòïÏãù Ï†ïÍ∑úÌôî
            if not '-' in phone and len(phone) == 11:
                formatted_phone = f"{phone[:3]}-{phone[3:7]}-{phone[7:]}"
            else:
                formatted_phone = phone
                
            results[formatted_phone] = get_membership_history_real(formatted_phone)
        
        return jsonify({
            'success': True,
            'results': results,
            'total_checked': len(results)
        })
        
    except Exception as e:
        return jsonify({'success': False, 'message': f'Ïò§Î•ò: {str(e)}'}), 500

@app.route('/health')
def health():
    """Ìó¨Ïä§ Ï≤¥ÌÅ¨"""
    return jsonify({'status': 'healthy', 'timestamp': datetime.now().isoformat()})

@app.route('/favicon.ico')
def favicon():
    """ÌååÎπÑÏΩò ÏöîÏ≤≠ Ï≤òÎ¶¨"""
    from flask import Response
    return Response('', status=204)

# Vercel ÎòêÎäî Ïö¥ÏòÅ ÌôòÍ≤ΩÏóêÏÑú ÏûêÎèô Ï¥àÍ∏∞Ìôî
if os.getenv('VERCEL') or os.getenv('PRODUCTION'):
    try:
        init_db()
        print("‚úÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å (Ïö¥ÏòÅ ÌôòÍ≤Ω)")
    except Exception as e:
        print(f"‚ùå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî Ïã§Ìå®: {e}")

if __name__ == '__main__':
    print("üöÄ Ï≤¥ÌóòÎã® Ïö¥ÏòÅ Ìà¥ ÏãúÏûë Ï§ë...")
    init_db()
    print("üåê ÏÑúÎ≤Ñ Ïã§Ìñâ: http://localhost:8000")
    print("üìä Í¥ÄÎ¶¨Ïûê ÌéòÏù¥ÏßÄ: http://localhost:8000")
    
    # Î°úÏª¨ Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎßå Ïã§Ìñâ
    app.run(host='0.0.0.0', port=8000, debug=True) 